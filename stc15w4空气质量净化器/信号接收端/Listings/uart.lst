C51 COMPILER V9.59.0.0   UART                                                              05/07/2023 00:18:29 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: D:\keil\keil_mdk\C51\BIN\C51.EXE uart.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\
                    -uart.lst) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include "uart.h"
   2          #include <stdlib.h>
   3          
   4          #define u8 unsigned char
   5          #define u16 unsigned int
   6          
   7          u8 is_hongwai_key01 = 0;
   8          u8 is_hongwai_key02 = 0;
   9          u8 is_hongwai_key03 = 0;
  10          
  11          bit busy;
  12          bit busy_uart3;
  13          bit busy_uart4;
  14          
  15          u8 rec_buf[10];
  16          u8 rec_buf2[10];
  17          
  18          //CO2接包函数
  19          void CO2Rec_DataPacket(u8 _data)
  20          {
  21   1              static u8 i = 0;
  22   1              static u8 tmp_buffer[10] = "";
  23   1      
  24   1              tmp_buffer[i++] = _data;        
  25   1      
  26   1              if ( i==1 && tmp_buffer[0]!=0X2C)       //没收到包头,重新接收
  27   1              {
  28   2                      i = 0;  //下标i复位
  29   2                      memset(tmp_buffer,0,10);        //释放临时数组
  30   2                      return;
  31   2              }
  32   1      
  33   1              if( i>=6 )
  34   1              {
  35   2      
  36   2                      memcpy(rec_buf,tmp_buffer,10);  //拷贝到目标数组
  37   2                      memset(tmp_buffer,0,10);        //释放临时数组
  38   2                      i = 0;  //下标i复位
  39   2      
  40   2              }
  41   1              
  42   1      }
  43          
  44          void CO2Devide_DataPacket(u16 *rec_value)
  45          {
  46   1              if(rec_buf[0] == 0)     //如果数据包是空的则返回
  47   1              {
  48   2                      return ;
  49   2              }
  50   1      
  51   1              *rec_value = rec_buf[1]*256+rec_buf[2];
  52   1      }
  53          
  54          
C51 COMPILER V9.59.0.0   UART                                                              05/07/2023 00:18:29 PAGE 2   

  55          //tvoc接包函数
  56          void TVOCRec_DataPacket(u8 _data)
  57          {
  58   1              static u8 i = 0;
  59   1              static u8 tmp_buffer[10] = "";
  60   1      
  61   1              tmp_buffer[i++] = _data;        
  62   1      
  63   1              if ( i==1 && tmp_buffer[0]!=0X2C)       //没收到包头,重新接收
  64   1              {
  65   2                      i = 0;  //下标i复位
  66   2                      memset(tmp_buffer,0,10);        //释放临时数组
  67   2                      return;
  68   2              }
  69   1      
  70   1              if( i>=8 )              //接收完所有数据
  71   1              {
  72   2      
  73   2                      memcpy(rec_buf2,tmp_buffer,10); //拷贝到目标数组
  74   2                      memset(tmp_buffer,0,10);        //释放临时数组
  75   2                      i = 0;  //下标i复位
  76   2      
  77   2              }
  78   1              
  79   1      }
  80          
  81          //tvoc拆包函数
  82          void TVOCDevide_DataPacket(u16 *tvoc,u16 *tmp,u16 *hum)
  83          {
  84   1              if(rec_buf2[0] == 0)    //如果数据包是空的则返回
  85   1              {
  86   2                      return ;
  87   2              }
  88   1      
  89   1              *tvoc = rec_buf2[1]*256+rec_buf2[2];
  90   1              *tmp = rec_buf2[3]*256+rec_buf2[4];
  91   1              *hum = rec_buf2[5]*256+rec_buf2[6];
  92   1      }
  93          
  94          void Uart01_Init(void)          //9600bps@11.0592MHz
  95          {
  96   1      
  97   1              SCON = 0x50;            //8位数据,可变波特率
  98   1              AUXR &= 0xBF;           //定时器时钟12T模式
  99   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
 100   1              TMOD &= 0x0F;           //设置定时器模式
 101   1              TL1 = 0xE8;             //设置定时初始值
 102   1              TH1 = 0xFF;             //设置定时初始值
 103   1              ET1 = 0;                //禁止定时器%d中断
 104   1              TR1 = 1;                //定时器1开始计时
 105   1      
 106   1          ES = 1;
 107   1          EA = 1;     //开启定时器
 108   1      }
 109          
 110          void Uart01_SendByte(u8 _data)
 111          {
 112   1          SBUF = _data;
 113   1          while(TI == 0);
 114   1          TI = 0;
 115   1      }
 116          
C51 COMPILER V9.59.0.0   UART                                                              05/07/2023 00:18:29 PAGE 3   

 117          void Uart01_SendString(u8 *str)
 118          {
 119   1              while(*str !='\0')              
 120   1                      Uart01_SendByte(*str++);
 121   1      }
 122          
 123          
 124          
 125          void Uart02_Init()              //9600bps  11.0592mhz
 126          {
 127   1              S2CON = 0x50;           //8位数据,可变波特率
 128   1              AUXR |= 0x04;           //定时器时钟1T模式
 129   1              T2L = 0xE0;             //设置定时初始值
 130   1              T2H = 0xFE;             //设置定时初始值
 131   1              AUXR |= 0x10;           //定时器2开始计时
 132   1      
 133   1          IE2 &= 0xFE;   //先对需要设置的位进行清零 1111 1110
 134   1          IE2 |= 0x01;   // | ESPI | ES2 允许UART2中断
 135   1          EA = 1;        //允许总中断
 136   1      
 137   1              P_SW2 &=~ 0X01; //选择 P10RX P11TX
 138   1      }
 139          
 140          
 141          void Uart02_SendData(unsigned char dat)
 142          {
 143   1          while (busy); // 等待前面的数据发送完成
 144   1          busy = 1;
 145   1          S2BUF = dat; // 写数据到UART2数据寄存器
 146   1      }
 147          
 148          
 149          void Uart02_SendString(char *s)
 150          {
 151   1          while (*s) // 检测字符串结束标志
 152   1          {
 153   2              Uart02_SendData(*s++); // 发送当前字符
 154   2          }
 155   1      }
 156          
 157          void Uart03_Init(void)          //9600bps@11.0592MHz
 158          {
 159   1              S3CON = 0x10;           //8位数据,可变波特率
 160   1              S3CON &= 0xBF;          //串口3选择定时器2为波特率发生器
 161   1              AUXR |= 0x04;           //定时器时钟1T模式
 162   1              T2L = 0xE0;             //设置定时初始值
 163   1              T2H = 0xFE;             //设置定时初始值
 164   1              AUXR |= 0x10;           //定时器2开始计时
 165   1      
 166   1          IE2 &= ~0x08;   //先对需要设置的位进行清零 
 167   1          IE2 |= 0x08;   //允许串口三中断
 168   1          EA = 1;        //允许总中断
 169   1      
 170   1              P_SW2 &=~ 0X02; //选择 P00RX P01TX
 171   1      }
 172          
 173          void Uart03_SendData(unsigned char dat)
 174          {
 175   1          while (busy); // 等待前面的数据发送完成
 176   1          busy_uart3 = 1;
 177   1          S3BUF = dat; // 写数据到UART2数据寄存器
 178   1      }
C51 COMPILER V9.59.0.0   UART                                                              05/07/2023 00:18:29 PAGE 4   

 179          
 180          
 181          void Uart03_SendString(char *s)
 182          {
 183   1          while (*s) // 检测字符串结束标志
 184   1          {
 185   2              Uart03_SendData(*s++); // 发送当前字符
 186   2          }
 187   1      }
 188          
 189          
 190          void Uart04_Init(void)          //9600bps@11.0592MHz
 191          {
 192   1              S4CON = 0x10;           //8位数据,可变波特率
 193   1              S4CON &= 0xBF;          //串口4选择定时器2为波特率发生器
 194   1              AUXR |= 0x04;           //定时器时钟1T模式
 195   1              T2L = 0xE0;             //设置定时初始值
 196   1              T2H = 0xFE;             //设置定时初始值
 197   1              AUXR |= 0x10;           //定时器2开始计时
 198   1      
 199   1          IE2 &= ~0x10;   //先对需要设置的位进行清零 
 200   1          IE2 |= 0x10;   //允许串口三中断
 201   1          EA = 1;        //允许总中断
 202   1      
 203   1              P_SW2 &=~ 0X04; //选择 P02RX P03TX
 204   1      }
 205          
 206          void Uart04_SendData(unsigned char dat)
 207          {
 208   1          while (busy); // 等待前面的数据发送完成
 209   1          busy_uart4 = 1;
 210   1          S4BUF = dat; // 写数据到UART2数据寄存器
 211   1      }
 212          
 213          
 214          void Uart04_SendString(char *s)
 215          {
 216   1          while (*s) // 检测字符串结束标志
 217   1          {
 218   2              Uart04_SendData(*s++); // 发送当前字符
 219   2          }
 220   1      }
 221          
 222          
 223          /***********************串口中断服务函数***********************/
 224          
 225          
 226          
 227          
 228          void Uart01_Routine() interrupt 4
 229          {
 230   1              u8 uart_data; //串口收到的数据
 231   1          if(RI == 1)
 232   1          {
 233   2              RI = 0;
 234   2              uart_data = SBUF;
 235   2                      // Uart01_SendByte(uart_data);
 236   2      
 237   2      
 238   2          }
 239   1      }
 240          
C51 COMPILER V9.59.0.0   UART                                                              05/07/2023 00:18:29 PAGE 5   

 241          void Uart02_Routine() interrupt 8 using 2
 242          {
 243   1          unsigned char mydata;
 244   1          if(S2CON & 0x01)          //如果是接收中断
 245   1          {
 246   2              S2CON &= 0xFE;       //接收中断标志位清0  
 247   2              mydata = S2BUF;      //将接收缓冲区的数据保存到mydata变量中
 248   2                      TVOCRec_DataPacket(mydata);
 249   2          }
 250   1      
 251   1              if(S2CON & 0x02)          //如果是发送中断
 252   1          {
 253   2              S2CON &= 0xFD;       //发送中断标志清0  
 254   2                      busy = 0;
 255   2          }
 256   1      
 257   1      }
 258          
 259          
 260          void Uart03_Routine() interrupt 17
 261          {
 262   1          unsigned char mydata;
 263   1          if(S3CON & 0x01)          //如果是接收中断
 264   1          {
 265   2              S3CON &= 0xFE;       //接收中断标志位清0  
 266   2              mydata = S3BUF;      //将接收缓冲区的数据保存到mydata变量中
 267   2                      CO2Rec_DataPacket(mydata);
 268   2          }
 269   1      
 270   1              if(S3CON & 0x02)          //如果是发送中断
 271   1          {
 272   2              S3CON &= 0xFD;       //发送中断标志清0  
 273   2                      busy_uart3 = 0;
 274   2          }
 275   1      
 276   1      }
 277          
 278          void Uart04_Routine() interrupt 18
 279          {
 280   1          unsigned char mydata;
 281   1          if(S4CON & 0x01)          //如果是接收中断
 282   1          {
 283   2              S4CON &= 0xFE;       //接收中断标志位清0  
 284   2              mydata = S4BUF;      //将接收缓冲区的数据保存到mydata变量中
 285   2                      
 286   2      
 287   2                      if( mydata == 0x0C)
 288   2                              is_hongwai_key01 = 1;
 289   2                      if( mydata == 0x18)
 290   2                              is_hongwai_key02 = 1;
 291   2                      if( mydata == 0x5E)
 292   2                              is_hongwai_key03 = 1;
 293   2      
 294   2          }
 295   1      
 296   1              if(S4CON & 0x02)          //如果是发送中断
 297   1          {
 298   2              S4CON &= 0xFD;       //发送中断标志清0  
 299   2                      busy_uart4 = 0;
 300   2          }
 301   1      
 302   1      }
C51 COMPILER V9.59.0.0   UART                                                              05/07/2023 00:18:29 PAGE 6   

 303          
 304          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    913    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     45      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
